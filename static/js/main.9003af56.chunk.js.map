{"version":3,"sources":["Components/Task.js","Components/TaskList.js","Components/TaskContainer.js","Components/TaskDisplay.js","Components/Header.js","Pages/Home.js","App.js","index.js"],"names":["Task","props","TaskButton","task","Button","id","onClick","click","style","height","className","completed","tasks","map","ListGroup","Item","isImportant","Row","Col","title","TaskList","noTasksMessage","taskList","length","TaskContainer","Card","Body","Title","TaskDisplay","completedTasks","filter","displayContainters","container","lg","handleClick","Header","useState","inputText","setInputText","setIsImportant","handleFormSubmit","e","preventDefault","alert","handleAddTask","Form","onSubmit","Control","maxLength","value","onChange","target","size","placeholder","sm","InputGroup","Prepend","Text","Checkbox","width","checked","Append","type","Home","setTasks","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","Container","fluid","text","newTask","Math","random","currentTask","toString","currentTarget","stateWithoutCurrentTask","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9003af56.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst importantStyle =\r\n  \"task-important task-hover p-2 font-weight-bold shadow  \";\r\nconst unImportantStyle = \"task task-hover p-2 shadow  \";\r\nconst completedStyle =\r\n  \"task-completed task-hover p-2 font-weight-light shadow  \";\r\n\r\nconst Task = (props) => {\r\n  const TaskButton = (task) => (\r\n    <Button\r\n      id={task.id}\r\n      onClick={props.click}\r\n      style={{ height: \"100%\" }}\r\n      className={\r\n        task.completed === \"true\"\r\n          ? \"btn btn-danger btn-md float-right shadow\"\r\n          : \"btn btn-success btn-md float-right shadow\"\r\n      }>\r\n      <i\r\n        className={\r\n          task.completed === \"true\" ? \"fas fa-times\" : \"fas fa-arrow-right\"\r\n        }></i>\r\n    </Button>\r\n  );\r\n\r\n  const displayTaskList = props.tasks.map((task) => {\r\n    return (\r\n      <ListGroup.Item\r\n        className={\r\n          task.completed === \"true\"\r\n            ? completedStyle\r\n            : task.isImportant\r\n            ? importantStyle\r\n            : unImportantStyle\r\n        }\r\n        key={task.id}>\r\n        <Row className=\"p-1\">\r\n          <Col className=\"align-self-center task-title\">{task.title}</Col>\r\n          <Col>{TaskButton(task)}</Col>\r\n        </Row>\r\n      </ListGroup.Item>\r\n    );\r\n  });\r\n  return displayTaskList;\r\n};\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport Task from \"./Task.js\";\r\n\r\nconst TaskList = (props) => {\r\n  //messages shown when there is no task in container\r\n  let noTasksMessage;\r\n  if (props.title === \"To do\") {\r\n    noTasksMessage = \"nothing to do, good job\";\r\n  }\r\n  if (props.title === \"In progress\") {\r\n    noTasksMessage = \"no tasks there, start doing something!\";\r\n  }\r\n  if (props.title === \"Completed\") {\r\n    noTasksMessage = \"no tasks completed, lazy!\";\r\n  }\r\n\r\n  const taskList =\r\n    props.tasks.length > 0 ? (\r\n      <Task tasks={props.tasks} click={props.click} />\r\n    ) : (\r\n      <h2 className=\"text-center \">{noTasksMessage}</h2>\r\n    );\r\n\r\n  return <div>{taskList}</div>;\r\n};\r\n\r\nexport default TaskList;\r\n","import React from \"react\";\r\n\r\nimport TaskList from \"./TaskList.js\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nconst TaskContainer = (props) => {\r\n  return (\r\n    <Card className=\"taskContainer shadow-lg\">\r\n      <Card.Body>\r\n        <Card.Title className=\"h5 p-2\">{props.title}</Card.Title>\r\n        <hr />\r\n        <ListGroup className=\"rounded\">\r\n          <TaskList\r\n            title={props.title}\r\n            tasks={props.tasks}\r\n            click={props.click}\r\n          />\r\n        </ListGroup>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default TaskContainer;\r\n","import React from \"react\";\r\nimport TaskContainer from \"./TaskContainer.js\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nconst TaskDisplay = (props) => {\r\n  //create 3 lists, one for each completion step\r\n  const completedTasks = props.tasks.filter(\r\n    (task) => task.completed === \"true\"\r\n  );\r\n  const incompletedTasks = props.tasks.filter(\r\n    (task) => task.completed === \"false\"\r\n  );\r\n  const inProgressTasks = props.tasks.filter(\r\n    (task) => task.completed === \"inProgress\"\r\n  );\r\n\r\n  //3 main components will be build based on this list\r\n  const containerType = [\r\n    { title: \"To do\", completed: \"false\", tasks: incompletedTasks },\r\n    { title: \"In progress\", completed: \"inProgress\", tasks: inProgressTasks },\r\n    { title: \"Completed\", completed: \"true\", tasks: completedTasks },\r\n  ];\r\n\r\n  const displayContainters = containerType.map((container) => (\r\n    <Col key={container.id} lg className=\"p-2\">\r\n      <TaskContainer\r\n        title={container.title}\r\n        tasks={container.tasks}\r\n        click={props.handleClick}\r\n      />\r\n    </Col>\r\n  ));\r\n\r\n  return <Row className=\"px-3\">{displayContainters}</Row>;\r\n};\r\n\r\nexport default TaskDisplay;\r\n","import React, { useState } from \"react\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\n\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nconst Header = (props) => {\r\n  //state to control input values\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [isImportant, setIsImportant] = useState(false);\r\n\r\n  //functions handling controlled components input\r\n  const handleInputText = (e) => {\r\n    setInputText(e.target.value);\r\n  };\r\n  const handleCheckbox = (e) => {\r\n    setIsImportant(!isImportant);\r\n  };\r\n  const handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputText.length < 1) {\r\n      alert(\"Enter your task before adding it!\");\r\n    } else {\r\n      props.handleAddTask(inputText, isImportant);\r\n      setIsImportant(false);\r\n      setInputText(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleFormSubmit}>\r\n      <Row className=\"px-2 mt-2 mb-2  flex\">\r\n        <Col className=\"mt-3 pr-sm-2\">\r\n          <Form.Control\r\n            className=\"shadow\"\r\n            maxLength=\"60\"\r\n            value={inputText}\r\n            onChange={handleInputText}\r\n            size=\"lg\"\r\n            placeholder=\"enter new task here\"></Form.Control>\r\n        </Col>\r\n\r\n        <Col sm=\"auto\" className=\"mt-3 pl-sm-2\">\r\n          <InputGroup\r\n            size=\"lg\"\r\n            className=\"shadow justify-content-md-end justify-content-center flex-fill\">\r\n            <InputGroup.Prepend className=\"flex-fill\">\r\n              <InputGroup.Text className=\"flex-fill\">\r\n                is it important?\r\n              </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n\r\n            <InputGroup.Checkbox\r\n              style={{ width: \"20px\", height: \"20px\" }}\r\n              checked={isImportant}\r\n              onChange={handleCheckbox}\r\n            />\r\n            <InputGroup.Append className=\"flex-fill\">\r\n              <Button\r\n                type=\"submit\"\r\n                className=\"flex-fill\"\r\n                onClick={handleFormSubmit}>\r\n                add task\r\n              </Button>\r\n            </InputGroup.Append>\r\n          </InputGroup>\r\n        </Col>\r\n      </Row>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import TaskDisplay from \"../Components/TaskDisplay\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport Header from \"../Components/Header.js\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\n\r\nconst Home = () => {\r\n  //HOOKS **********************\r\n\r\n  const [tasks, setTasks] = useState([\r\n    //three states are needed, using string instead of boolean\r\n  ]);\r\n\r\n  //Click handler\r\n\r\n  const handleClick = (e) => {\r\n    let currentTask = tasks.filter(\r\n      (task) => task.id.toString() === e.currentTarget.id\r\n    );\r\n    const stateWithoutCurrentTask = tasks.filter(\r\n      (task) => task.id.toString() !== e.currentTarget.id\r\n    );\r\n    currentTask = currentTask[0];\r\n    if (currentTask.completed === \"false\") {\r\n      currentTask.completed = \"inProgress\";\r\n      setTasks([...stateWithoutCurrentTask, currentTask]);\r\n    } else if (currentTask.completed === \"inProgress\") {\r\n      currentTask.completed = \"true\";\r\n      setTasks([...stateWithoutCurrentTask, currentTask]);\r\n    } else if (currentTask.completed === \"true\") {\r\n      setTasks([...stateWithoutCurrentTask]);\r\n    }\r\n  };\r\n\r\n  const handleAddTask = (text, isImportant) => {\r\n    const newTask = {\r\n      title: text,\r\n      completed: \"false\",\r\n      id: Math.random(),\r\n      isImportant: isImportant,\r\n    };\r\n    setTasks([...tasks, newTask]);\r\n  };\r\n\r\n  //gets state from localstorage\r\n  useEffect(() => {\r\n    setTasks(JSON.parse(localStorage.getItem(\"tasks\")));\r\n  }, []);\r\n  //sets state in localstorage on every component rerender\r\n  useEffect(() => {\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n  });\r\n\r\n  return (\r\n    <Container fluid className=\"home text-lowercase\">\r\n      <Row className=\"spacer\"></Row>\r\n      <Header handleAddTask={handleAddTask} />\r\n      <TaskDisplay tasks={tasks} handleClick={handleClick} />\r\n      <button onClick={() => setTasks([])}>clear</button>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import \"./Style/App.css\";\nimport Home from \"./Pages/Home.js\";\nfunction App() {\n  return <Home />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./Style/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}